import prisma from '../../../lib/prisma'; import { removeBackgroundBuffer } from '../../../lib/clipdrop'; import { supabaseAdmin } from '../../../lib/supabase'; function monthYearFromDate(d){ const dt = new Date(d); return { month: dt.getUTCMonth()+1, year: dt.getUTCFullYear() } } export async function POST(req){ try{ const body = await req.json(); const { imageBase64, filename, userId, adId } = body; if(!userId) return new Response(JSON.stringify({ error:'not authorized' }), { status:401 }); const now = new Date(); const { month, year } = monthYearFromDate(now); let limit = await prisma.usageLimit.findUnique({ where: { userId_month_year: { userId, month, year } } }).catch(()=>null); if(!limit){ limit = await prisma.usageLimit.create({ data:{ userId, month, year, removalsCount:0 } }); } if(limit.removalsCount >= 5) return new Response(JSON.stringify({ error:'monthly limit reached' }), { status:403 }); const res = await removeBackgroundBuffer(imageBase64); if(res.mock){ if(process.env.SUPABASE_URL && process.env.SUPABASE_ANON_KEY){ const buffer = Buffer.from(imageBase64,'base64'); const path = `uploads/${userId}/${Date.now()}-${filename}`; await supabaseAdmin.storage.from('uploads').upload(path, buffer, { upsert:false }); const publicUrl = `${process.env.SUPABASE_URL}/storage/v1/object/public/uploads/${path}`; if(process.env.DATABASE_URL && adId){ await prisma.image.create({ data:{ adId, url: publicUrl, backgroundRemoved:false } }); } await prisma.usageLimit.update({ where:{ id: limit.id }, data:{ removalsCount: limit.removalsCount + 1 } }); return new Response(JSON.stringify({ url: publicUrl, mock:true }), { status:200 }); } return new Response(JSON.stringify({ error:'storage not configured' }), { status:501 }); } else { const buffer = Buffer.from(res.base64,'base64'); const path = `uploads/${userId}/${Date.now()}-nobg-${filename}`; const { data, error } = await supabaseAdmin.storage.from('uploads').upload(path, buffer, { upsert:false }); if(error) return new Response(JSON.stringify({ error: error.message }), { status:500 }); const publicUrl = `${process.env.SUPABASE_URL}/storage/v1/object/public/uploads/${path}`; if(process.env.DATABASE_URL && adId){ await prisma.image.create({ data:{ adId, url: publicUrl, backgroundRemoved:true } }); } await prisma.usageLimit.update({ where:{ id: limit.id }, data:{ removalsCount: limit.removalsCount + 1 } }); return new Response(JSON.stringify({ url: publicUrl }), { status:200 }); } }catch(e){ console.error(e); return new Response(JSON.stringify({ error:'remove failed' }), { status:500 }); } }
